{"version":3,"sources":["userdata.js"],"names":["mongoose","require","mongoDB","connect","useNewUrlParser","useUnifiedTopology","db","connection","on","console","error","bind","once","log","uniqueValidator","postSchema","Schema","firstname","type","String","required","trim","validate","validator","v","length","message","props","lastname","email","test","value","comment","plugin","module","exports","Post","model"],"mappings":";;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB,C,CACA;;;AACA,IAAIC,OAAO,GAAG,0KAAd;AACAF,QAAQ,CAACG,OAAT,CAAiBD,OAAjB,EAA0B;AAAEE,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAA1B,E,CACA;;AACA,IAAIC,EAAE,GAAGN,QAAQ,CAACO,UAAlB,C,CACA;;AACAD,EAAE,CAACE,EAAH,CAAM,OAAN,EAAeC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,2BAA5B,CAAf;AAEAH,EAAE,CAACM,IAAH,CAAQ,MAAR,EAAgB,YAAY;AACxBH,EAAAA,OAAO,CAACI,GAAR,CAAY,kBAAZ;AACH,CAFD;;AAGA,IAAMC,eAAe,GAAGb,OAAO,CAAC,2BAAD,CAA/B,C,CAEA;;;AACA,IAAMc,UAAU,GAAG,IAAIf,QAAQ,CAACgB,MAAb,CAAoB;AACnCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE,wBAFH;AAGPC,IAAAA,IAAI,EAAE,IAHC;AAIPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAOA,CAAC,CAACC,MAAF,GAAW,CAAlB;AACD,OAHO;AAIRC,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAJD;AAJH,GADwB;AAajCC,EAAAA,QAAQ,EAAE;AACRV,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,wBAFF;AAGRC,IAAAA,IAAI,EAAE,IAHE;AAIRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAOA,CAAC,CAACC,MAAF,GAAW,CAAlB;AACD,OAHO;AAIRC,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAJD;AAJF,GAbuB;AA0BjCE,EAAAA,KAAK,EAAE;AACLX,IAAAA,IAAI,EAAEC,MADD;AAELE,IAAAA,IAAI,EAAE,IAFD;AAGJC,IAAAA,QAAQ,EAAE;AACTC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAO,4JAA4JM,IAA5J,CAAiKN,CAAjK,CAAP;AACD,OAHQ;AAITE,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA,yBAAcA,KAAK,CAACI,KAApB;AAAA;AAJA;AAHN,GA1B0B;AAqCjCC,EAAAA,OAAO,EAAE;AACPd,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE,8BAFH;AAGPC,IAAAA,IAAI,EAAE,IAHC;AAIPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAOA,CAAC,CAACC,MAAF,GAAW,CAAlB;AACD,OAHO;AAIRC,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAJD;AAJH;AArCwB,CAApB,CAAnB;AAmDAZ,UAAU,CAACkB,MAAX,CAAkBnB,eAAlB;AACAoB,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsBpC,QAAQ,CAACqC,KAAT,CAAe,MAAf,EAAuBtB,UAAvB,CAAtB","sourcesContent":["\r\n// Require the mongoose module\r\nvar mongoose = require('mongoose');\r\n// Set up a mongoose connection\r\nvar mongoDB = \"mongodb+srv://mo:comon123@cluster0.c2uhk.mongodb.net/userdata?authSource=admin&replicaSet=atlas-rvxm88-shard-0&readPreference=primary&appname=MongoDB%20Compass&ssl=true\"\r\nmongoose.connect(mongoDB, { useNewUrlParser: true, useUnifiedTopology: true });\r\n// Get the connection\r\nvar db = mongoose.connection;\r\n// Bind connection to error event (to get notification of connection errors)\r\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\r\n\r\ndb.once('open', function () {\r\n    console.log(\"we're connected!\")\r\n});\r\nconst uniqueValidator = require(\"mongoose-unique-validator\");\r\n\r\n//create schema for contact form\r\nconst postSchema = new mongoose.Schema({\r\n    firstname: {\r\n        type: String,\r\n        required: \"First name is required\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },    \r\n      \r\n      lastname: {\r\n        type: String,\r\n        required: \"First name is required\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },    \r\n      \r\n      \r\n      email: {\r\n        type: String,\r\n        trim: true,\r\n         validate: {\r\n          validator: function (v) {\r\n            return /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v);\r\n          },\r\n          message: (props) => `${props.value} is not a valid Email address.`,\r\n        },\r\n      },\r\n    \r\n      comment: {\r\n        type: String,\r\n        required: \"Please write your post body.\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },       \r\n    \r\n});\r\n\r\npostSchema.plugin(uniqueValidator);\r\nmodule.exports.Post = mongoose.model('Post', postSchema);"],"file":"userdata.dev.js"}